generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Candidate {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  phone         String
  password      String
  notice_period Int?
  current_ctc   Float?
  expected_ctc  Float?
  availability  Json?
  status        CandidateStatus @default(new)
  role          Role           @default(CANDIDATE)
  appointments  Appointment[]
  conversations Conversation[]
  applications  Application[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Job {
  id           Int           @id @default(autoincrement())
  title        String
  description  String        @db.Text
  requirements String        @db.Text
  location     String?
  jobType      String?
  salary       String?
  department   String?
  appointments Appointment[]
  applications Application[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Appointment {
  id          Int              @id @default(autoincrement())
  date        DateTime
  status      AppointmentStatus @default(scheduled)
  notes       String?          @db.Text
  candidate   Candidate        @relation(fields: [candidateId], references: [id])
  candidateId Int
  job         Job              @relation(fields: [jobId], references: [id])
  jobId       Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Conversation {
  id          Int     @id @default(autoincrement())
  message     String  @db.Text
  sender      Sender
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Check your schema.prisma file to ensure it has the Application model with proper relations
model Application {
  id          Int       @id @default(autoincrement())
  candidateId Int
  jobId       Int
  status      String    @default("pending") 
  note        String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  job         Job       @relation(fields: [jobId], references: [id])
}

enum CandidateStatus {
  new
  in_progress
  completed
  rejected
}

enum AppointmentStatus {
  scheduled
  completed
  cancelled
}

enum Sender {
  agent
  candidate
}

enum Role {
  CANDIDATE
  ADMIN
}